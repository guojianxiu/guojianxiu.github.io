<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/06/19/test/"/>
    <url>/2023/06/19/test/</url>
    
    <content type="html"><![CDATA[<p><img src="https://file.wangfeng.pro/gjx/2022/08/28/16616799328054.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/19/hello-world/"/>
    <url>/2023/06/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码覆盖率实践</title>
    <link href="/2023/05/26/%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/05/26/%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h1><h2 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h2><ul><li>覆盖率是衡量测试效果的一个辅助指标</li><li>代码覆盖率<ul><li>测试过程中（运行时）被执行的源代码占全部源代码的比例</li><li>代码覆盖率高不等于代码质量高</li></ul></li><li>功能覆盖率<ul><li>依据需求</li><li>功能用例case覆盖多少业务功能</li></ul></li></ul><h2 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>语句覆盖</li><li>判定覆盖</li><li>分支覆盖</li></ul><h3 id="常见子类型"><a href="#常见子类型" class="headerlink" title="常见子类型"></a>常见子类型</h3><ul><li>行覆盖率</li><li>类覆盖率</li><li>分支覆盖率</li><li>方法覆盖率</li><li>指令覆盖率</li><li>圈复杂度</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>代码覆盖率可以作为单元测试&#x2F;自动化测试的参考指标</li><li>分析未覆盖的代码，反推测试case是否充分（需求设计问题？测试用例设计问题？）是否需要设计case进行覆盖</li><li>检测程序的废代码，代码是否冗余</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>代码覆盖率高不等于代码质量高</li><li>无法确定是否测试所有需求功能的组合</li><li>无法了解覆盖逻辑的程度和深度</li></ul><h2 id="常见工具类型"><a href="#常见工具类型" class="headerlink" title="常见工具类型"></a>常见工具类型</h2><ul><li>代码检测 </li><li>运行时检测</li><li>中间代码检测</li></ul><h2 id="代码覆盖率工具"><a href="#代码覆盖率工具" class="headerlink" title="代码覆盖率工具"></a>代码覆盖率工具</h2><table><thead><tr><th align="left">语言</th><th align="left">工具</th></tr></thead><tbody><tr><td align="left">JAVA</td><td align="left">Jacoco</td></tr><tr><td align="left"></td><td align="left">Emma</td></tr><tr><td align="left"></td><td align="left">cobertura</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Python</td><td align="left">Coverage.py</td></tr></tbody></table><p><img src="/media/16850897308936.jpg" alt="name1"></p><h1 id="Jacoco"><a href="#Jacoco" class="headerlink" title="Jacoco"></a>Jacoco</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Jacoco 是一个开源的覆盖率工具，针对的语言为java。它可以嵌入到 Ant 、Maven 中，也提供了 EclEmma Eclipse 插件。Jacoco 主要通过代码注入（即 Java Agent）方式来实现覆盖率的功能。很多第三方的工具提供了对 Jacoco 的集成，如：Sonar、Jenkins、IDEA</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://www.jacoco.org/jacoco/">https://www.jacoco.org/jacoco/</a></li></ul><h2 id="插桩方式"><a href="#插桩方式" class="headerlink" title="插桩方式"></a>插桩方式</h2><ul><li>原理：注入</li><li>源代码（Source Code）注入和字节码（Byte Code）注入两大类</li><li>字节码注入又可以分为两大模式：On-The-Fly 注入模式和 Offline 注入模式。</li><li>实现：ASM 是一个 Java 字节码操纵框架，能被用来动态生成类或者增强既有类的功能，可以直接产生 class 文件，也可以在类被加载入 JVM 之前动态改变类行为。</li><li>on-the-fly 模式是JVM通过 -javaagent参数指定jar文件启动代理程序，代理程序在ClassLoader装载一个class前判断是否修改class文件，并将探针插入class文件，探针不改变原有方法的行为，只是记录是否已经执行。</li><li>offline 模式就是在测试之前先对文件进行插桩，生成插过桩的class或jar包，测试插过桩的class和jar包，生成覆盖率信息到文件，最后统一处理，生成报告。</li><li>Offline模式适用于以下场景：<ul><li>运行环境不支持java agent</li><li>部署环境不允许设置JVM参数</li><li>字节码需要被转换成其他虚拟机字节码，如Android Dalvik VM</li><li>动态修改字节码过程中和其他agent冲突</li><li>无法自定义用户加载类</li></ul></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/media/16850897600354.jpg"></p><ul><li>对Java字节码进行插桩，有on-the-fly和offline两种方式。</li><li>执行测试用例，收集程序执行轨迹信息，支持通过dump将操作记录从服务端传输到本地。</li><li>数据处理器结合程序执行轨迹信息和代码结构信息分析生成代码覆盖率报告。</li><li>结合源码和编译后的文件，可以将代码覆盖率报告图形化展示出来，如html，xml等文件格式。</li></ul><h1 id="Jacoco-on-the-fly模式插桩实践"><a href="#Jacoco-on-the-fly模式插桩实践" class="headerlink" title="Jacoco on-the-fly模式插桩实践"></a>Jacoco on-the-fly模式插桩实践</h1><ul><li>以SpringBoot项目为例</li></ul><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p><code>java -javaagent:/data/webapp/jacoco/jacocoagent.jar=includes=*,output=tcpserver,append=false,address=localhost,port=6200 -jar xxxxxxxxxx.jar </code><br>参数说明：</p><ul><li>-javaagent:[yourpath&#x2F;]jacocoagent.jar&#x3D;[option1]&#x3D;[value1],[option2]&#x3D;[value2]</li><li>yourpath为jacoco下载解压的地址</li><li>includes标识对要插桩的包进行过滤，*标识所有class</li><li>port 唯一端口</li><li>output 以tcpserver方式启动jar包并插桩；可选参数有file、tcpserver、tcpclient</li><li>address 对外开放的地址</li><li>xxxx.jar 被测服务</li><li>append False时若文件已存在则替换文件；True时附加数据到现有文件</li></ul><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>可以执行测试代码（接口自动化、UI自动化、单元测试）</p><h2 id="生成报告"><a href="#生成报告" class="headerlink" title="生成报告"></a>生成报告</h2><h3 id="获取exec文件"><a href="#获取exec文件" class="headerlink" title="获取exec文件"></a>获取exec文件</h3><p><code>java -jar jacococli.jar dump --address 0.0.0.0 --port 6305 --destfile jacoco-demo.exec </code></p><ul><li>adredess port 要与启动时的参数一致</li><li>destfile 输出文件路径</li></ul><h3 id="生成报告-1"><a href="#生成报告-1" class="headerlink" title="生成报告"></a>生成报告</h3><p><code>java -jar jacococli.jar report ./jacoco-demo.exec --classfiles /application/BOOT-INF/classes  --sourcefiles /Users/gjx/IdeaProjects/demo/src/main/java --html report</code><br><code>java -jar jacococli.jar report jacoco-demo.exec --classfiles /application/BOOT-INF/classes --html report</code></p><ul><li>–html 在当前目录下生成html格式报告</li><li>classfiles、sourcefiles 可以有多个<br><img src="/media/16850897748925.jpg"></li></ul><p>参考资料</p><ul><li><a href="https://zhuanlan.zhihu.com/p/363864068">https://zhuanlan.zhihu.com/p/363864068</a></li><li><a href="https://www.cnblogs.com/liuyitan/p/11542076.html">https://www.cnblogs.com/liuyitan/p/11542076.html</a></li><li><a href="https://www.cnblogs.com/liuyitan/p/15716027.html">https://www.cnblogs.com/liuyitan/p/15716027.html</a></li><li><a href="https://www.jianshu.com/p/7c9a4ca864da">https://www.jianshu.com/p/7c9a4ca864da</a></li></ul><h2 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h2><ul><li>修改被测服务dockerfile，引入jacoco包并更改jar包启动方式</li><li>cicd执行镜像，部署镜像</li><li>运行自动化测试</li><li>执行生成jacoo覆盖率报告命令，依据报告分析测试结果，补充自动化case以及去除冗余代码</li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul><li>可以考虑使用diff实现精准测试，完成每次版本的代码差异，针对性测试，保证变更代码进行测试覆盖</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>allure使用教程</title>
    <link href="/2023/05/26/allure%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2023/05/26/allure%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="allure使用教程"><a href="#allure使用教程" class="headerlink" title="allure使用教程"></a>allure使用教程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>前置条件</p></li><li><p>安装jdk</p></li><li><p>在<a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/" title="下载地址">下载地址</a>选择合适的版本进行下载</p></li><li><p><code>curl -O https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.18.0/allure-commandline-2.18.0.zip</code></p></li><li><p>解压到指定目录</p></li><li><p><code>unzip -n ./library/allure-2.18.0.zip -d /usr/local/bin/</code></p></li><li><p>增加系统变量</p></li><li><p><code>ln -s /usr/local/bin/allure-2.18.0/bin/allure /usr/bin/allure</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.zshrc <br><span class="hljs-comment"># 也有可能是bash</span><br><span class="hljs-comment"># 在文件中增加以下内容</span><br><span class="hljs-built_in">export</span> PATH=/Users/gjx/Tools/allure-2.14.0/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># 保存文件</span><br><span class="hljs-comment"># 重新加载文件使得配置生效</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><ul><li>验证安装<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">allure <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="生成报告"><a href="#生成报告" class="headerlink" title="生成报告"></a>生成报告</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 方式一</span><br>allure serve <span class="hljs-regexp">/home/</span>path<span class="hljs-regexp">/to/</span>project<span class="hljs-regexp">/target/</span>surefire-reports/<br><span class="hljs-comment"># 方式二</span><br>allure generate <span class="hljs-regexp">/home/</span>path<span class="hljs-regexp">/to/</span>project<span class="hljs-regexp">/target/</span>report_result<span class="hljs-regexp">/ -o /</span>home<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/project/</span>target<span class="hljs-regexp">/report_result/</span>html<br></code></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在生成测试报告之前，在allure-results文件夹中创建environment.properties (or environment.xml) 文件。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># environment.properties</span><br>Browser=Chrome<br>Browser.Version=63.0<br>Stand=Production<br><br><span class="hljs-comment"># environment.xml</span><br><span class="hljs-variable">&lt;environment&gt;</span><br>    <span class="hljs-variable">&lt;parameter&gt;</span><br>        <span class="hljs-variable">&lt;key&gt;</span>Browser<span class="hljs-variable">&lt;/key&gt;</span><br>        <span class="hljs-variable">&lt;value&gt;</span>Chrome<span class="hljs-variable">&lt;/value&gt;</span><br>    <span class="hljs-variable">&lt;/parameter&gt;</span><br>    <span class="hljs-variable">&lt;parameter&gt;</span><br>        <span class="hljs-variable">&lt;key&gt;</span>Browser.Version<span class="hljs-variable">&lt;/key&gt;</span><br>        <span class="hljs-variable">&lt;value&gt;</span>63.0<span class="hljs-variable">&lt;/value&gt;</span><br>    <span class="hljs-variable">&lt;/parameter&gt;</span><br>    <span class="hljs-variable">&lt;parameter&gt;</span><br>        <span class="hljs-variable">&lt;key&gt;</span>Stand<span class="hljs-variable">&lt;/key&gt;</span><br>        <span class="hljs-variable">&lt;value&gt;</span>Production<span class="hljs-variable">&lt;/value&gt;</span><br>    <span class="hljs-variable">&lt;/parameter&gt;</span><br><span class="hljs-variable">&lt;/environment&gt;</span><br></code></pre></td></tr></table></figure><h2 id="结果分类"><a href="#结果分类" class="headerlink" title="结果分类"></a>结果分类</h2><ul><li>默认</li><li>产品缺陷：assert error</li><li>测试缺陷：不是assert error的error</li><li>自定义</li><li>在生成测试报告之前，在allure-results文件夹中创建categories.json文件。<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> categories.json<br>[<br>  &#123;<br>    <span class="hljs-regexp">//</span>分类名称，必须<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ignored tests&quot;</span>, <br>    <span class="hljs-string">&quot;matchedStatuses&quot;</span>: [<span class="hljs-string">&quot;skipped&quot;</span>] <br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Infrastructure problems&quot;</span>,<br>    <span class="hljs-regexp">//</span>分类状态，可选<br>    <span class="hljs-string">&quot;matchedStatuses&quot;</span>: [<span class="hljs-string">&quot;broken&quot;</span>, <span class="hljs-string">&quot;failed&quot;</span>],<br>    <span class="hljs-regexp">//</span>正则匹配错误信息，可选<br>    <span class="hljs-string">&quot;messageRegex&quot;</span>: <span class="hljs-string">&quot;.*bye-bye.*&quot;</span> <br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Outdated tests&quot;</span>,<br>    <span class="hljs-string">&quot;matchedStatuses&quot;</span>: [<span class="hljs-string">&quot;broken&quot;</span>],<br>    <span class="hljs-regexp">//</span>正则匹配堆栈跟踪，可选<br>    <span class="hljs-string">&quot;traceRegex&quot;</span>: <span class="hljs-string">&quot;.*FileNotFoundException.*&quot;</span> <br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Product defects&quot;</span>,<br>    <span class="hljs-string">&quot;matchedStatuses&quot;</span>: [<span class="hljs-string">&quot;failed&quot;</span>]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Test defects&quot;</span>,<br>    <span class="hljs-string">&quot;matchedStatuses&quot;</span>: [<span class="hljs-string">&quot;broken&quot;</span>]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><ul><li>支持语言、框架</li><li>Java<ul><li>JUnit 4</li><li>JUnit 5</li><li>TestNG</li><li>Cucumber JVM</li><li>Selenide</li></ul></li><li>Python<ul><li>Pytest</li><li>Behave</li><li>Nose</li></ul></li><li>JavaScript</li><li>Jasmine</li><li>Cucumber JS</li><li>Karma</li><li>Mocha</li><li>Ruby</li><li>Cucumber</li><li>RSpec</li><li>Groovy</li><li>Spock</li><li>PHP</li><li>PHPUnit</li><li>ALLURECodeception</li><li>.Net</li><li>SpecFlow</li><li>NUnit 3</li><li>NUnit 2</li><li>MSTest</li><li>Scala</li><li>ScalaTest</li><li>Specs</li></ul><h2 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a>Pytest</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 安装</span><br>pip install allure-pytest<br><span class="hljs-comment"># 生成报告</span><br>pytest --alluredir=<span class="hljs-regexp">/tmp/my</span>_allure_results<br></code></pre></td></tr></table></figure><h3 id="Xfail"><a href="#Xfail" class="headerlink" title="Xfail"></a>Xfail</h3><p>@pytest.mark.xfail(condition&#x3D;<strong>lambda</strong>: True, reason&#x3D;’this test is expecting failure’)</p><h3 id="Conditional-mark"><a href="#Conditional-mark" class="headerlink" title="Conditional mark"></a>Conditional mark</h3><p>@pytest.mark.skipif(‘2 + 2 !&#x3D; 5’, reason&#x3D;’This test is skipped by a triggered condition in @pytest.mark.skipif’)</p><h3 id="Fixtures-and-Finalizers"><a href="#Fixtures-and-Finalizers" class="headerlink" title="Fixtures and Finalizers"></a>Fixtures and Finalizers</h3><p>@pytest.fixture(scope&#x3D;’session’)</p><h3 id="Parametrization"><a href="#Parametrization" class="headerlink" title="Parametrization"></a>Parametrization</h3><p>@pytest.mark.parametrize(‘param1’, [True, False], ids&#x3D;[‘id explaining value 1’, ‘id explaining value 2’])</p><h3 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h3><p>@allure.step<br>@allure.step(‘step in conftest.py’)</p><h3 id="Attachments"><a href="#Attachments" class="headerlink" title="Attachments"></a>Attachments</h3><p>allure.attach(‘A text attacment in module scope fixture’, ‘blah blah blah’, allure.attachment_type.TEXT)<br>allure.attach.file(‘.&#x2F;data&#x2F;totally_open_source_kitten.png’, attachment_type&#x3D;allure.attachment_type.PNG)   allure.attach(‘ a page ‘, ‘Attach with HTML type’, allure.attachment_type.HTML)</p><h3 id="Descriptions"><a href="#Descriptions" class="headerlink" title="Descriptions"></a>Descriptions</h3><p>@allure.description_html(“”” Test with some complicated html description         Firstname     Lastname     Age           William     Smith     50           Vasya     Jackson     94     “””)<br>@allure.description(“”” Multiline test description. That comes from the allure.description decorator.  Nothing special about it. “””)</p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>@allure.title(“This test has a custom title”)</p><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p>@allure.link(‘<a href="https://www.youtube.com/watch?v=4YYzUTYZRMU" title="https://www.youtube.com/watch?v=4YYzUTYZRMU">https://www.youtube.com/watch?v=4YYzUTYZRMU</a>‘)<br>@allure.link(‘<a href="https://www.youtube.com/watch?v=Su5p2TqZxKU" title="https://www.youtube.com/watch?v=Su5p2TqZxKU">https://www.youtube.com/watch?v=Su5p2TqZxKU</a>‘, name&#x3D;’Click me’)<br>@allure.issue(‘140’, ‘Pytest-flaky test retries shows like test steps’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># 使用issue时需要生成报告时传入参数<br>pytest directory_with_tests/ --alluredir=/tmp/my_allure_report \<br> --allure-link-pattern=issue:http://www.mytesttracker.com/issue/&#123;&#125;<br></code></pre></td></tr></table></figure><p>@allure.testcase(TEST_CASE_LINK, ‘Test case title’)</p><h3 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h3><p>@allure.feature(‘feature_2’)</p><h3 id="story"><a href="#story" class="headerlink" title="story"></a>story</h3><p>@allure.story(‘story_1’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># 可用参数<br>--allure-epics<br>--allure-features<br>--allure-stories<br><br># 指定运行哪些story features<br>pytest tests.py --allure-stories story_1,story_2<br>pytest tests.py --allure-features feature2 --allure-stories story2<br></code></pre></td></tr></table></figure><h3 id="Severity-markers"><a href="#Severity-markers" class="headerlink" title="Severity markers"></a>Severity markers</h3><p>@allure.severity(allure.severity_level.TRIVIAL)<br>@allure.severity(allure.severity_level.NORMAL)<br>@allure.severity(allure.severity_level.CRITICAL)<br><img src="/media/16520948304645/16520965619552.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pytest tests.py --allure-severities normal,critical<br></code></pre></td></tr></table></figure><h2 id="Behave"><a href="#Behave" class="headerlink" title="Behave"></a>Behave</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">#安装<br>pip install allure-behave<br># 生成报告<br>behave -f allure_behave.formatter:AllureFormatter -o %allure_result_folder% ./features<br></code></pre></td></tr></table></figure><h3 id="Severity"><a href="#Severity" class="headerlink" title="Severity"></a>Severity</h3><h3 id="Steps-and-Scenarious-status"><a href="#Steps-and-Scenarious-status" class="headerlink" title="Steps and Scenarious status"></a>Steps and Scenarious status</h3><h3 id="Step-Data"><a href="#Step-Data" class="headerlink" title="Step Data"></a>Step Data</h3><h2 id="Nose"><a href="#Nose" class="headerlink" title="Nose"></a>Nose</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">nosetests --with-allure --logdir=/path/to/put/results<br>nosetests --with-allure --logdir=/path/to/put/results --not-clear-logdir<br></code></pre></td></tr></table></figure><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>nose.allure.attach(‘my attach’, ‘Hello, World’)</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step"></a>Step</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">import nose<br><br>def test_foo():<br>    with nose.allure.step(&#x27;step one&#x27;):<br>        # do stuff<br><br>    with nose.allure.step(&#x27;step two&#x27;):<br>        # do more stuff<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">import nose<br><br>@nose.allure.step<br>def make_test_data_foo():<br>    # do stuff<br><br>def test_foo():<br>    assert make_some_data_foo() is not None<br><br>@nose.allure.step(&#x27;make_some_data_foo&#x27;)<br>def make_some_data_bar():<br>    # do another stuff<br><br>def test_bar():<br>    assert make_some_data_bar() is not None<br></code></pre></td></tr></table></figure><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">import nose<br><br>def test_dummy():<br>    nose.allure.environment(report=&#x27;Allure report&#x27;, browser=u&#x27;Firefox&#x27;)<br></code></pre></td></tr></table></figure><h3 id="Severity-1"><a href="#Severity-1" class="headerlink" title="Severity"></a>Severity</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">import nose<br><br>class TestBar(object):<br><br>    @nose.allure.severity(nose.allure.severity_level.CRITICAL)<br>    def test_bar(self):<br>        pass<br><br># custom severity<br>@nose.allure.severity(&quot;hard&quot;)<br>def test_bar(self):<br>    pass<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">nosetests my_tests/ --with-allure --logdir=tmp --severity=&quot;critical, hard&quot;<br></code></pre></td></tr></table></figure><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>@nose.allure.issue(‘<a href="http://jira.lan/browse/ISSUE-1" title="http://jira.lan/browse/ISSUE-1">http://jira.lan/browse/ISSUE-1</a>‘)</p><h3 id="Features-amp-Stories"><a href="#Features-amp-Stories" class="headerlink" title="Features &amp; Stories"></a>Features &amp; Stories</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">import nose<br><br>@nose.allure.feature(&#x27;Feature1&#x27;)<br>@nose.allure.story(&#x27;Story1&#x27;)<br>def test_minor():<br>    assert False<br><br>class TestBar(object):<br><br>    @nose.allure.feature(&#x27;Feature2&#x27;)<br>    @nose.allure.story(&#x27;Story1&#x27;)<br>    def test_bar(self):<br>        pass<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">nosetests my_tests/ --with-allure --logdir=tmp --feature=&quot;Feature1, Feature2&quot;<br>nosetests my_tests/ --with-allure --logdir=tmp --feature=&quot;Feature1, Feature2&quot; --story=&quot;Story1, Story2&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
